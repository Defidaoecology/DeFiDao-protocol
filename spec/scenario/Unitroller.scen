
Test "Standard Upgrade"
    Unitroller Deploy
    PriceOracle Deploy Fixed 1.0
    -- Upgrade to G1
    snktrollerImpl Deploy ScenarioG1 ScensnktrollerG1
    Unitroller SetPendingImpl ScensnktrollerG1
    snktrollerImpl ScensnktrollerG1 BecomeG1 (PriceOracle Address) 0.2 20
    Assert Equal (snktroller CloseFactor) 0.2
    Assert Equal (snktroller MaxAssets) 20
    Assert Equal (snktroller Implementation) (Address ScensnktrollerG1)
    ListedCToken ZRX cZRX
    ListedCToken DAI cDAI
    -- Upgrade to G2
    snktrollerImpl Deploy StandardG2 StandardsnktrollerG2
    Unitroller SetPendingImpl StandardsnktrollerG2
    snktrollerImpl StandardsnktrollerG2 BecomeG2
    Assert Equal (snktroller CloseFactor) 0.2
    Assert Equal (snktroller MaxAssets) 20
    Assert Equal (snktroller Implementation) (Address StandardsnktrollerG2)
    -- Upgrade to G3
    snktrollerImpl Deploy ScenarioG3 ScensnktrollerG3
    Unitroller SetPendingImpl ScensnktrollerG3
    snktrollerImpl ScensnktrollerG3 BecomeG3 1e18 [cZRX cDAI]
    Assert Equal (snktroller CloseFactor) 0.2
    Assert Equal (snktroller MaxAssets) 20
    Assert Equal (snktroller Implementation) (Address ScensnktrollerG3)

Test "Standard Upgrade, then downgrade then upgrade again"
    Unitroller Deploy
    PriceOracle Deploy Fixed 1.0
    -- Upgrade to G1
    snktrollerImpl Deploy ScenarioG1 ScensnktrollerG1
    Unitroller SetPendingImpl ScensnktrollerG1
    snktrollerImpl ScensnktrollerG1 BecomeG1 (PriceOracle Address) 0.2 20
    Assert Equal (snktroller CloseFactor) 0.2
    Assert Equal (snktroller MaxAssets) 20
    Assert Equal (snktroller Implementation) (Address ScensnktrollerG1)
    ListedCToken ZRX cZRX
    ListedCToken DAI cDAI
    -- Upgrade to G2
    snktrollerImpl Deploy StandardG2 snktrollerG2
    Unitroller SetPendingImpl snktrollerG2
    snktrollerImpl snktrollerG2 BecomeG2
    snktroller SetPauseGuardian Coburn
    Assert Equal (snktroller PauseGuardian) (Address Coburn)
    Assert Equal (snktroller CloseFactor) 0.2
    Assert Equal (snktroller MaxAssets) 20
    Assert Equal (snktroller Implementation) (Address snktrollerG2)
    -- Upgrade to G3
    snktrollerImpl Deploy ScenarioG3 ScensnktrollerG3
    Unitroller SetPendingImpl ScensnktrollerG3
    snktrollerImpl ScensnktrollerG3 BecomeG3 1e18 [cZRX cDAI]
    Assert Equal (snktroller PauseGuardian) (Address Coburn)
    Assert Equal (snktroller CloseFactor) 0.2
    Assert Equal (snktroller MaxAssets) 20
    Assert Equal (snktroller Implementation) (Address ScensnktrollerG3)
    -- Downgrade to G2
    Unitroller SetPendingImpl snktrollerG2
    snktrollerImpl snktrollerG2 BecomeG2
    Assert Equal (snktroller CloseFactor) 0.2
    Assert Equal (snktroller MaxAssets) 20
    Assert Equal (snktroller Implementation) (Address snktrollerG2)
    -- Upgrade to G3 again
    Unitroller SetPendingImpl ScensnktrollerG3
    snktrollerImpl ScensnktrollerG3 BecomeG3 1e18 []
    Assert Equal (snktroller GetsnkMarkets) [(Address cZRX) (Address cDAI)]
    Assert Equal (snktroller PauseGuardian) (Address Coburn)
    Assert Equal (snktroller CloseFactor) 0.2
    Assert Equal (snktroller MaxAssets) 20
    Assert Equal (snktroller Implementation) (Address ScensnktrollerG3)

Test "Once become, can become again"
    -- TODO: See why ABI is broken here
    Unitroller Deploy
    PriceOracle Deploy Fixed 1.0
    snktrollerImpl Deploy ScenarioG1 ScensnktrollerG1
    Unitroller SetPendingImpl ScensnktrollerG1
    snktrollerImpl ScensnktrollerG1 BecomeG1 (PriceOracle Address) 0.2 20
    Assert Equal (snktroller CloseFactor) 0.2
    Assert Equal (snktroller MaxAssets) 20
    Assert Equal (snktroller Implementation) (Address ScensnktrollerG1)
    snktrollerImpl Deploy ScenarioG1 ScensnktrollerG1_2
    Unitroller SetPendingImpl ScensnktrollerG1_2
    snktrollerImpl ScensnktrollerG1_2 BecomeG1 (PriceOracle Address) 0.4 40
    Assert Equal (snktroller CloseFactor) 0.4
    Assert Equal (snktroller MaxAssets) 40
    Assert Equal (snktroller Implementation) (Address ScensnktrollerG1_2)

--G1 recome
Test "Recome has default values"
    Unitroller Deploy
    PriceOracle Deploy Fixed 1.0
    snktrollerImpl Deploy ScenarioG1 ScensnktrollerG1
    Unitroller SetPendingImpl ScensnktrollerG1
    snktrollerImpl ScensnktrollerG1 Recome
    Assert Equal (snktroller CloseFactor) 0.0
    Assert Equal (snktroller MaxAssets) 0
    Assert Equal (snktroller Implementation) (Address ScensnktrollerG1)

--G1 bork
Test "Bork and unbork"
    Unitroller Deploy
    PriceOracle Deploy Fixed 1.0
    snktrollerImpl Deploy ScenarioG1 ScensnktrollerG1
    -- Set a normal impl
    Unitroller SetPendingImpl ScensnktrollerG1
    snktrollerImpl ScensnktrollerG1 BecomeG1 (PriceOracle Address) 0.2 20
    Assert Equal (snktroller CloseFactor) 0.2
    Assert Equal (snktroller MaxAssets) 20
    Assert Equal (snktroller Implementation) (Address ScensnktrollerG1)
    -- Now move to a borked one that's bad
    snktrollerImpl Deploy Borked MyBork
    Unitroller SetPendingImpl MyBork
    snktrollerImpl MyBork BecomeG1 (PriceOracle Address) 0.4 40
    Assert ReadRevert (snktroller CloseFactor) "revert"
    Assert Equal (snktroller Implementation) (Address MyBork)
    -- Now change back to the first good one
    Unitroller SetPendingImpl ScensnktrollerG1
    snktrollerImpl ScensnktrollerG1 Recome
    Assert Equal (snktroller CloseFactor) 0.2
    Assert Equal (snktroller MaxAssets) 20
    Assert Equal (snktroller Implementation) (Address ScensnktrollerG1)

Macro CheckUnitrollerStorage implementation
    -- Admin; 0
    Assert Equal (snktroller Admin) (Address Root)
    Assert Equal (StorageAt snktroller 0 0 "address") (Address Root)
    -- PendingAdmin; 1
    Assert Equal (snktroller PendingAdmin) (Address Coburn)
    Assert Equal (StorageAt snktroller 1 0 "address") (Address Coburn)
    -- snktrollerImplementation; 2
    Assert Equal (Unitroller Implementation) implementation
    Assert Equal (StorageAt snktroller 2 0 "address") implementation
    -- PendingsnktrollerImplementation; 3
    -- check as number since casting address 0 is not defined
    Assert Equal (StorageAt snktroller 3 0 "number") 0

Macro CheckV1Storage
    -- Oracle; 4
    Assert Equal (snktroller PriceOracle) (Address PriceOracle)
    Assert Equal (StorageAt snktroller 4 0 "address") (Address PriceOracle)
    -- CloseFactorMantissa; 5
    Assert Equal (snktroller CloseFactor) 0.2
    Assert Equal (StorageAt snktroller 5 0 "number") 0.2e18
    -- LiquidationIncentiveMantissa; 6
    Assert Equal (snktroller LiquidationIncentive) 1
    Assert Equal (StorageAt snktroller 6 0 "number") 1e18
    -- MaxAssets; 7
    Assert Equal (snktroller MaxAssets) 20
    Assert Equal (StorageAt snktroller 7 0 "number") 20
    -- AccountAssets; 8 *
    Assert Equal (StorageAt snktroller 8 0 "number") 0
    Assert Equal (StorageAtMapping snktroller 8 (Address Geoff) "number") 2
    Assert Equal (StorageAtMapping snktroller 8 (Address Geoff) "list(address)") [(Address cZRX) (Address cBAT)]
    Assert Equal (snktroller AssetsIn Geoff) [(Address cZRX) (Address cBAT)]
    -- Markets; 9 *
    Assert Equal (StorageAt snktroller 9 0 "number") 0
    Assert Equal (StorageAtNestedMapping snktroller 9 (Address cZRX) Geoff "marketStruct") [True 0.5 True]
    Assert Equal (StorageAtNestedMapping snktroller 9 (Address cBAT) Geoff "marketStruct") [True 0.4 True]
    Assert Equal (StorageAtNestedMapping snktroller 9 (Address cBAT) Coburn "marketStruct") [True 0.4 False]
    Assert Equal (snktroller CollateralFactor cZRX) 0.5
    Assert Equal (snktroller CollateralFactor cBAT) 0.4
    Assert Equal (snktroller CheckMembership Geoff cZRX) True
    Assert Equal (snktroller CheckMembership Geoff cBAT) True

Macro CheckV2Storage
    -- PauseGuardian; 10
    Assert Equal (snktroller PauseGuardian) (Address Coburn)
    Assert Equal (StorageAt snktroller 10 0 "address") (Address Coburn)
    -- MintGuardianPaused; 11
    Assert Equal (StorageAt snktroller 10 40 "bool") False
    Assert Equal (snktroller _MintGuardianPaused) False
    -- BorrowGuardianPaused; 12
    Assert Equal (StorageAt snktroller 10 42 "bool") False
    Assert Equal (snktroller _BorrowGuardianPaused) False
    -- TransferGuardianPaused; 13
    Assert Equal (StorageAt snktroller 10 44 "bool") False
    From Coburn (snktroller SetGuardianPaused "Transfer" True)
    Assert Equal (snktroller TransferGuardianPaused) True
    Assert Equal (StorageAt snktroller 10 44 "bool") True
    snktroller SetGuardianPaused "Transfer" False
    -- SeizeGuardianPaused; 14
    Assert Equal (StorageAt snktroller 10 46 "bool") False
    From Coburn (snktroller SetGuardianPaused "Seize" True)
    Assert Equal (snktroller SeizeGuardianPaused) True
    Assert Equal (StorageAt snktroller 10 46 "bool") True
    snktroller SetGuardianPaused "Seize" False
    --
    -- Pause by market storage
    --
    -- MintGuardianPaused; 15
    Assert Equal (StorageAtMapping snktroller 11 (Address cZRX) "bool") False
    From Coburn (snktroller SetGuardianMarketPaused cZRX "Mint" True)
    Assert Equal (snktroller MintGuardianMarketPaused cZRX) True
    Assert Equal (StorageAtMapping snktroller 11 (Address cZRX) "bool") True
    snktroller SetGuardianMarketPaused cZRX "Mint" False
    -- BorrowGuardianPaused; 16
    Assert Equal (StorageAtMapping snktroller 12 (Address cZRX) "bool") False
    From Coburn (snktroller SetGuardianMarketPaused cZRX "Borrow" True)
    Assert Equal (snktroller BorrowGuardianMarketPaused cZRX) True
    Assert Equal (StorageAtMapping snktroller 12 (Address cZRX) "bool") True
    snktroller SetGuardianMarketPaused cZRX "Borrow" False

Macro CheckV3Storage
    -- AllMarkets; 17
    Assert Equal (StorageAt snktroller 13 0 "number") 2
    -- TODO: StorageAtArray snktroller 13?
    -- snkRate; 18
    Assert Equal (StorageAt snktroller 14 0 "number") 1e18
    -- snkSpeeds; 19
    Assert Equal (StorageAt snktroller 15 0 "number") 0
    -- snkSupplyState; 20
    Assert Equal (StorageAt snktroller 16 0 "number") 0
    -- snkBorrowState; 21
    Assert Equal (StorageAt snktroller 17 0 "number") 0
    -- snkSupplierIndex; 22
    Assert Equal (StorageAt snktroller 18 0 "number") 0
    -- snkBorrowerIndex; 23
    Assert Equal (StorageAt snktroller 19 0 "number") 0
    -- snkAccrued; 24
    Assert Equal (StorageAt snktroller 20 0 "number") 0

-- Times out coverage, disable for now - ideally set flag to not run in coverage
Pending "Keeps all storage"
    Unitroller Deploy
    PriceOracle Deploy Fixed 1.0
    snktrollerImpl Deploy StandardG1 snktrollerG1
    Unitroller SetPendingImpl snktrollerG1
    snktrollerImpl snktrollerG1 BecomeG1 (PriceOracle Address) 0.2 20
    snktroller SetPendingAdmin Coburn
    ---
    NewCToken ZRX cZRX delegatorType:CErc20Delegator cTokenType:CErc20Delegate
    NewCToken BAT cBAT delegatorType:CErc20Delegator cTokenType:CErc20Delegate
    Give cBAT 10e18 BAT -- Faucet some bat to borrow
    Support cZRX collateralFactor:0.5
    Support cBAT collateralFactor:0.4
    Prep Geoff Some ZRX cZRX
    Mint Geoff 100e18 cZRX
    EnterMarkets Geoff cZRX cBAT
    Borrow Geoff 1e18 cBAT
    --
    CheckUnitrollerStorage (Address snktrollerG1)
    CheckV1Storage
    --
    snktrollerImpl Deploy StandardG2 snktrollerG2
    Unitroller SetPendingImpl snktrollerG2
    Assert Equal (Unitroller PendingImplementation) (Address snktrollerG2)
    Assert Equal (StorageAt snktroller 3 0 "address") (Address snktrollerG2)
    snktrollerImpl snktrollerG2 BecomeG2
    snktroller SetPauseGuardian Coburn
    --
    CheckUnitrollerStorage (Address snktrollerG2)
    CheckV1Storage
    CheckV2Storage
    --
    snktrollerImpl Deploy StandardG3 snktrollerG3
    Unitroller SetPendingImpl snktrollerG3
    snktrollerImpl snktrollerG3 BecomeG3 1e18 [cZRX cBAT]
    --
    CheckUnitrollerStorage (Address snktrollerG3)
    CheckV1Storage
    CheckV2Storage
    CheckV3Storage
    --
    snktrollerImpl Deploy Standard snktrollerG4
    Unitroller SetPendingImpl snktrollerG4
    snktrollerImpl snktrollerG4 Become
    --
    CheckUnitrollerStorage (Address snktrollerG4)
    CheckV1Storage
    CheckV2Storage
    CheckV3Storage
